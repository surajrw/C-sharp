OOPS :-
OOP stands for Object-Oriented Programming.
Procedural programming is about writing procedures or methods that perform operations on the data, while object-oriented programming is about creating objects that contain both data and methods.
Object-oriented programming has several advantages over procedural programming:
OOP is faster and easier to execute
OOP provides a clear structure for the programs
OOP helps to keep the C# code DRY "Don't Repeat Yourself", and makes the code easier to maintain, modify and debug
OOP makes it possible to create full reusable applications with less code and shorter development time
The "Don't Repeat Yourself" (DRY) principle is about reducing the repetition of code. You should extract out the codes that are common for the application, and place them at a single place and reuse them instead of repeating it.
---------------------------------------------------------------------------------------------------------------------------------------------------------
Class and Object :-
A class is a template for objects, and an object is an instance of a class.
When the individual objects are created, they inherit all the variables and methods from the class.
 
Class            Object
Car()            Volvo
                 Honda

Fruit()          Apple
                 Mango
---------------------------------------------------------------------------------------------------------------------------------------------------------
C# is associated with classes and objects, along with its attributes and methods. For example: in real life, a car is an object. The car has attributes, such as weight and color, and methods, such as drive and brake.
A Class is like an object constructor, or a "blueprint" for creating objects.

To create a class, use the class keyword:
Create a class named "Car" with a variable color:
class Car 
{
  string color = "red";
}
---------------------------------------------------------------------------------------------------------------------------------------------------------
Create an Object:
An object is created from a class.
To create an object of Car, specify the class name, followed by the object name, and use the keyword new:
Create an object called "myObj" and use it to print the value of color:
class Car 
{
  string color = "red";

  static void Main(string[] args)
  {
    Car myObj = new Car();
    Console.WriteLine(myObj.color);
  }
}
---------------------------------------------------------------------------------------------------------------------------------------------------------
Multiple Objects:
You can create multiple objects of one class:
Create two objects of Car:
class Car
{
  string color = "red";
  static void Main(string[] args)
  {
    Car myObj1 = new Car();
    Car myObj2 = new Car();
    Console.WriteLine(myObj1.color);
    Console.WriteLine(myObj2.color);
  }
}
---------------------------------------------------------------------------------------------------------------------------------------------------------
